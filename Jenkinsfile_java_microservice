pipeline{
    agent any
    triggers {
        pollSCM('*/1 * * * *')
    }
    stages {
        stage('build') {
            steps {
                echo "Building java app"
            }
        }

        stage('deploy-dev') {
            steps {
                script{
                    deploy("dev")
                }
            }
        }
        stage('test-dev') {
            steps {
                script{
                    test("dev")
                }
            }
        }
        stage('deploy-int') {
            steps {
                script{
                    deploy("int")
                }
            }
        }
        stage('test-int') {
            steps {
                script{
                    test("int")
                }
            }
        }

        stage('deploy-prod') {
            steps {
                script{
                    deploy("prd")
                }
            }
        }
        stage('test-prod') {
            steps {
                script{
                    test("prd")
                }
            }
        }
    }
    post {
        always {
            echo 'This is always post section'
        }
        success {
            echo 'This is success post section'
        }
        failure {
            echo 'This is failure post section'
        }
    }
}

def deploy(String environment) {
    echo "Deployment to ${environment} triggered.."
    build job: "ui_tests", parameters: [string(name: "ENVIRONMENT", value: "${environment}")]
}

def test(String environment){
    echo "Running tests on ${environment}"
    powershell "docker run --network=host -d -t --name api_test_executor_${environment} api_test_executor:latest"
    powershell "docker exec api_test_executor_${environment} cucumber --tags=@${environment} --format html --out test-output/report.html"
    powershell "docker cp api_test_executor_${environment}:/usr/src/api-tests/test-output/report.html report_${environment}.html"
    powershell "docker rm -f api_test_executor_${environment}"
    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: '', reportFiles: "report_${environment}.html", reportName: "Test Report ${environment}", reportTitles: ''])
}